; Sample F# lexer configuration

[LEXER_STYLES]
; DEFAULT=
KEYWORDS_1=#A082BD
KEYWORDS_2=#008080
KEYWORDS_3=#93CDBA
KEYWORDS_4=#378BBA
KEYWORDS_5=#BC8F8F
; IDENTIFIER=
QUOTED_IDENTIFIER=#B72F14
COMMENT=#679D47
COMMENT_LINE=#679D47
PREPROCESSOR=#BC8F8F
LINE_NUMBER=#BC8F8F
OPERATOR=#AC93AC
NUMBER=#F08080
CHARACTER=#CD6000
STRING=#CD6000
VERBATIM_STRING=#B72F14
QUOTATION=#378BF0
ATTRIBUTE=#378BBA
PRINTF_FORMAT_SPECIFIER=#BF8CE1

[LEXER_PROPERTIES]
FOLD_COMMENTS=
FOLD_LINE_COMMENTS=
FOLD_IMPORTS=
FOLD_PREPROCESSOR=

[LEXER_KEYWORDS]
KEYWORDS_1="abstract and as assert async atomic base begin break checked class component const constraint constructor continue default delegate do done downcast downto eager elif else end event exception extern external false finally fixed for fun function functor global if in include inherit inline interface internal lazy let match member method mixin module mutable namespace new null object of open or override parallel private process protected public pure rec return sealed select static struct tailcall task then to trait true try type upcast use val virtual volatile void when while with yield"
KEYWORDS_2="abs acos add allPairs append asin atan atan2 average averageBy base1 base2 blit bprintf cache cast ceil choose chunkBySize collect compareWith concat contains containsKey copy cos cosh count countBy create createBased delay difference distinct distinctBy empty eprintf eprintfn except exists exists2 exactlyOne failwith failwithf fill filter find findBack findIndex findIndexBack findKey floor fold fold2 foldBack foldBack2 forall forall2 fprintf fprintfn fst get groupBy head ignore indexed init initBased initInfinite insertAt insertManyAt intersect intersectMany invalidArg isEmpty isProperSubset isProperSuperset isSubset isSuperset item iter iter2 iteri iteri2 kbprintf kfprintf kprintf ksprintf last length length1 length2 length3 length4 map map2 map3 mapFold mapFoldBack mapi mapi2 max maxBy maxElement min minBy minElement nameof not ofArray ofList ofSeq pairwise partition permute pick pown printf printfn raise readonly rebase reduce reduceBack remove removeAt removeManyAt replicate rev round scan scanBack seq set sin singleton sinh skip skipWhile snd sort sortBy sortByDescending sortDescending sortInPlace sortInPlaceBy sortInPlaceWith sortWith splitAt splitInto sprintf sqrt sub sum sumBy tail take takeWhile tan tanh toArray toList toSeq transpose truncate tryExactlyOne tryFind tryFindBack tryFindIndex tryFindIndexBack tryHead tryItem tryFindKey tryLast tryPick typeof unfold union unionMany unzip unzip3 updateAt where windowed zeroCreate zeroCreateBased zip zip3"
KEYWORDS_3="array bigint bool byte byref char comparison decimal double enum equality exn float float32 inref int int8 int16 int32 int64 list nativeint nativeptr None obj Ok option Option outref ref Result sbyte Some single string unmanaged unativeint uint uint8 uint16 uint32 uint64 unit void voidptr voption"
KEYWORDS_4="ArgumentException Array Array2D Array3D Array4D BigInteger Boolean Byte Char Collections Console Core CultureInfo DateTime Decimal Diagnostics Double Environment Error Exception Expr File Float FSharp Globalization Int16 Int32 Int64 IntPtr IO Linq List Map Math Microsoft NumberStyles Object Path Parallel Patterns Printf Quotations Random Regex ResizeArray SByte Seq Set Single String System UInt16 UInt32 UInt64 UIntPtr"
; newline escapes work, too
KEYWORDS_5=ContactInformation \
EmailAddress \
PostalAddress \
ZipCode
